@model VoxConnex.Models.QuoteQuestionnaire

@{
    ViewBag.Title = "Create";
}

<style>
    body {
        background-color: darkgrey;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 30px;
        height: 15px;
    }

        .switch input {
            display: none;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 13px;
            width: 13px;
            left: 2px;
            bottom: 1px;
            background-color: white;
            transition: .4s;
        }

    /* include generated hidden field here */
    input[type="checkbox"]:checked + input[type="hidden"] + .slider,
    input[type="checkbox"]:checked + .slider {
        background-color: #53b44a;
    }

    /* include generated hidden field here */
    input[type="checkbox"]:focus + input[type="hidden"] + .slider,
    input[type="checkbox"]:focus + .slider {
        box-shadow: 0 0 1px #53b44a;
    }

    /* include generated hidden field here */
    input[type="checkbox"]:checked + input[type="hidden"] + .slider:before,
    input[type="checkbox"]:checked + .slider:before {
        transform: translateX(13px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

    .slider.round:before {
        border-radius: 50%;
    }

    .btn-roles {
        background-color: steelblue;
        text-decoration: none
    }

    .btn-roles:active {
        background-color: #53b44a;
        text-decoration: none;
    }


    .btn-roles:focus {
        background-color: #53b44a;
        text-decoration: none;
    }

    .btn-roles:visited {
        background-color: darkblue;
        text-decoration: none;
    }


    .btn-roles:hover {
        background-color: green;
        text-decoration: none
    }
    
</style>






@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    <hr />

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


    @*How many users?*@
    <div class="form-group ">
        <div class="col d-flex justify-content-center">
            <h2>
                Add users to your account
            </h2>
        </div>
        <div class="col d-flex justify-content-center" style="padding-bottom: 30px;">
            Maximum number of users is 10
        </div>
        <h5>
            @Html.LabelFor(model => model.HowManyUsers, htmlAttributes: new { @class = "col d-flex justify-content-center" })
        </h5>
        <div class="col d-flex justify-content-center" style="font-size: 2rem;">
            @Html.EditorFor(model => model.HowManyUsers, "Text", new { htmlAttributes = new { @class = "col text-center", @style = "max-width: 100px;" } })
        </div>


        @*This section is checking to see if the customer needs phones*@

        <div class="col d-flex justify-content-center" id="stage" style="padding-top:2rem;">
            <section class="slider-frame btn-group-toggle ">
                <label class="switch">
                    @Html.EditorFor(model => model.NeedPhones)
                    @*Don't worry about this warning. We're using the div here to call the slider function*@
                    <div class="slider round">
                    </div>
                </label>
            </section>
        </div>


        <h5 style="padding-top:-10px;">
            @Html.LabelFor(model => model.NeedPhones, htmlAttributes: new { @class = "col d-flex justify-content-center" })
        </h5>
    </div>

    @*Here you'll write your conditional statement, to take the user to a different section of the webpage depending on new phones is checked or not

        @if (Html.ValueFor(model => model.NeedPhones) == true)
        {
            ...Do stuff here...
        }*@
    <div class="col-sm-offset-8">
        <a href="#" class="btn-lg btn-success btn-roles " role="button">Next</a>

    </div>
    <hr />


    <div class="form-group">
        @Html.LabelFor(model => model.NeedNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.NeedNumber)
                @Html.ValidationMessageFor(model => model.NeedNumber, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.HowManyNumbersPorting, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.HowManyNumbersPorting, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HowManyNumbersPorting, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.HowManyLocations, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.HowManyLocations, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HowManyLocations, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ContactName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ContactName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ContactName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Street1, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Street1, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Street1, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Street2, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Street2, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Street2, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CityName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CityName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CityName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Zipcode, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Zipcode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Zipcode, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AcceptTerms, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.AcceptTerms)
                @Html.ValidationMessageFor(model => model.AcceptTerms, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>



<script>
        //$("#IsEnabled").change(function () {

        //    // check if checkbox is being checked
        //    // taken from /a/23007488 by Alexandru Chichinete
        //    if ($("#IsEnabled").is(":checked")) {
        //        // enable form submit
        //    }
        //});
</script>